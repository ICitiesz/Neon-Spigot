/*
 * This file is generated by jOOQ.
 */
package com.islandstudio.neon.stable.core.database.schema.neon_data.tables


import com.islandstudio.neon.stable.core.database.schema.neon_data.NeonData
import com.islandstudio.neon.stable.core.database.schema.neon_data.keys.FK_DT_ROLE_ACCESS_PERMISSION__DT_ACCESS_PERMISSION_PERMISSION_ID
import com.islandstudio.neon.stable.core.database.schema.neon_data.keys.FK_DT_ROLE_ACCESS__DT_ROLE_ROLE_ID
import com.islandstudio.neon.stable.core.database.schema.neon_data.keys.PK_ROLE_ACCESS
import com.islandstudio.neon.stable.core.database.schema.neon_data.keys.UQ_DT_ROLE_ACCESS_BATCH_1
import com.islandstudio.neon.stable.core.database.schema.neon_data.tables.DtAccessPermission.DtAccessPermissionPath
import com.islandstudio.neon.stable.core.database.schema.neon_data.tables.DtRole.DtRolePath
import com.islandstudio.neon.stable.core.database.schema.neon_data.tables.records.DtRoleAccessRecord

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DtRoleAccess(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, DtRoleAccessRecord>?,
    parentPath: InverseForeignKey<out Record, DtRoleAccessRecord>?,
    aliased: Table<DtRoleAccessRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<DtRoleAccessRecord>(
    alias,
    NeonData.NEON_DATA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>NEON_DATA.DT_ROLE_ACCESS</code>
         */
        val DT_ROLE_ACCESS: DtRoleAccess = DtRoleAccess()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DtRoleAccessRecord> = DtRoleAccessRecord::class.java

    /**
     * The column <code>NEON_DATA.DT_ROLE_ACCESS.ROLE_ACCESS_ID</code>.
     */
    val ROLE_ACCESS_ID: TableField<DtRoleAccessRecord, Long?> = createField(DSL.name("ROLE_ACCESS_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>NEON_DATA.DT_ROLE_ACCESS.ROLE_ID</code>.
     */
    val ROLE_ID: TableField<DtRoleAccessRecord, Long?> = createField(DSL.name("ROLE_ID"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>NEON_DATA.DT_ROLE_ACCESS.PERMISSION_ID</code>.
     */
    val PERMISSION_ID: TableField<DtRoleAccessRecord, Long?> = createField(DSL.name("PERMISSION_ID"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>NEON_DATA.DT_ROLE_ACCESS.ACCESS_TYPE</code>.
     */
    val ACCESS_TYPE: TableField<DtRoleAccessRecord, String?> = createField(DSL.name("ACCESS_TYPE"), SQLDataType.VARCHAR(7).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<DtRoleAccessRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<DtRoleAccessRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<DtRoleAccessRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>NEON_DATA.DT_ROLE_ACCESS</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>NEON_DATA.DT_ROLE_ACCESS</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>NEON_DATA.DT_ROLE_ACCESS</code> table reference
     */
    constructor(): this(DSL.name("DT_ROLE_ACCESS"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DtRoleAccessRecord>?, parentPath: InverseForeignKey<out Record, DtRoleAccessRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, DT_ROLE_ACCESS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class DtRoleAccessPath : DtRoleAccess, Path<DtRoleAccessRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DtRoleAccessRecord>?, parentPath: InverseForeignKey<out Record, DtRoleAccessRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<DtRoleAccessRecord>): super(alias, aliased)
        override fun `as`(alias: String): DtRoleAccessPath = DtRoleAccessPath(DSL.name(alias), this)
        override fun `as`(alias: Name): DtRoleAccessPath = DtRoleAccessPath(alias, this)
        override fun `as`(alias: Table<*>): DtRoleAccessPath = DtRoleAccessPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else NeonData.NEON_DATA
    override fun getIdentity(): Identity<DtRoleAccessRecord, Long?> = super.getIdentity() as Identity<DtRoleAccessRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<DtRoleAccessRecord> = PK_ROLE_ACCESS
    override fun getUniqueKeys(): List<UniqueKey<DtRoleAccessRecord>> = listOf(UQ_DT_ROLE_ACCESS_BATCH_1)
    override fun getReferences(): List<ForeignKey<DtRoleAccessRecord, *>> = listOf(FK_DT_ROLE_ACCESS__DT_ROLE_ROLE_ID, FK_DT_ROLE_ACCESS_PERMISSION__DT_ACCESS_PERMISSION_PERMISSION_ID)

    private lateinit var _dtRole: DtRolePath

    /**
     * Get the implicit join path to the <code>NEON_DATA.DT_ROLE</code> table.
     */
    fun dtRole(): DtRolePath {
        if (!this::_dtRole.isInitialized)
            _dtRole = DtRolePath(this, FK_DT_ROLE_ACCESS__DT_ROLE_ROLE_ID, null)

        return _dtRole;
    }

    val dtRole: DtRolePath
        get(): DtRolePath = dtRole()

    private lateinit var _dtAccessPermission: DtAccessPermissionPath

    /**
     * Get the implicit join path to the
     * <code>NEON_DATA.DT_ACCESS_PERMISSION</code> table.
     */
    fun dtAccessPermission(): DtAccessPermissionPath {
        if (!this::_dtAccessPermission.isInitialized)
            _dtAccessPermission = DtAccessPermissionPath(this, FK_DT_ROLE_ACCESS_PERMISSION__DT_ACCESS_PERMISSION_PERMISSION_ID, null)

        return _dtAccessPermission;
    }

    val dtAccessPermission: DtAccessPermissionPath
        get(): DtAccessPermissionPath = dtAccessPermission()
    override fun getChecks(): List<Check<DtRoleAccessRecord>> = listOf(
        Internal.createCheck(this, DSL.name("ENSURE_UPPER_CASE"), "\"ACCESS_TYPE\" = UPPER(\"ACCESS_TYPE\")", true)
    )
    override fun `as`(alias: String): DtRoleAccess = DtRoleAccess(DSL.name(alias), this)
    override fun `as`(alias: Name): DtRoleAccess = DtRoleAccess(alias, this)
    override fun `as`(alias: Table<*>): DtRoleAccess = DtRoleAccess(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DtRoleAccess = DtRoleAccess(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DtRoleAccess = DtRoleAccess(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DtRoleAccess = DtRoleAccess(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): DtRoleAccess = DtRoleAccess(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): DtRoleAccess = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): DtRoleAccess = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): DtRoleAccess = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): DtRoleAccess = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): DtRoleAccess = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): DtRoleAccess = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): DtRoleAccess = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): DtRoleAccess = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): DtRoleAccess = where(DSL.notExists(select))
}
