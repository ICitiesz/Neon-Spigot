--liquibase formatted sql

--changeset SYSTEM:base-1.1 dbms:hsqldb
/* Table 1: T_ROLE */
CREATE TABLE IF NOT EXISTS NEON_DATA.T_ROLE
(
    ROLE_ID           BIGINT GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1),
    ROLE_DISPLAY_NAME VARCHAR(64)                           NOT NULL,
    ROLE_CODE         VARCHAR(64)                           NOT NULL, /* E.g.: ROLE_CODE => role_admin */
    CREATED_AT        DATETIME    DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CREATED_BY        VARCHAR(16) DEFAULT 'SYSTEM'          NOT NULL,
    MODIFIED_AT       DATETIME    DEFAULT CURRENT_TIMESTAMP NOT NULL,
    MODIFIED_BY       VARCHAR(16) DEFAULT 'SYSTEM'          NOT NULL,

    /* P.Key */
    CONSTRAINT PK_T_ROLE PRIMARY KEY (ROLE_ID),

    /* UQ.Keys */
    CONSTRAINT UQ_T_ROLE_ROLE_CODE UNIQUE (ROLE_CODE),

    /* Checks */
    CONSTRAINT T_ROLE_ENSURE_UPPER CHECK (ROLE_CODE = UPPER(ROLE_CODE))
);

-- ############################################################################################## --
--changeset SYSTEM:base-1.2 dbms:hsqldb
/* Table 2: T_PLAYER_PROFILE */
CREATE TABLE IF NOT EXISTS NEON_DATA.T_PLAYER_PROFILE
(
    ID          BIGINT GENERATED BY DEFAULT AS IDENTITY ( MINVALUE 1 START WITH 1),
    PLAYER_UUID UUID                                  NOT NULL,
    PLAYER_NAME VARCHAR(16)                           NOT NULL,
    JOIN_AT     DATETIME    DEFAULT CURRENT_TIMESTAMP NOT NULL,
    ROLE_ID     BIGINT,
    CREATED_AT  DATETIME    DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CREATED_BY  VARCHAR(16) DEFAULT 'SYSTEM'          NOT NULL,
    MODIFIED_AT DATETIME    DEFAULT CURRENT_TIMESTAMP NOT NULL,
    MODIFIED_BY VARCHAR(16) DEFAULT 'SYSTEM'          NOT NULL,

    /* P.Key */
    CONSTRAINT PK_T_PLAYER_PROFILE PRIMARY KEY (ID),

    /* UQ.Keys */
    CONSTRAINT UQ_T_PLAYER_PROFILE_P_UUID_P_NAME UNIQUE (PLAYER_UUID, PLAYER_NAME),

    /* F.Keys -> T_ROLE.ROLE_ID */
    CONSTRAINT FK_T_PLAYER_PROFILE_T_ROLE_ROLE_ID FOREIGN KEY (ROLE_ID)
        REFERENCES T_ROLE (ROLE_ID) ON DELETE SET NULL
);

-- ############################################################################################## --
--changeset SYSTEM:base-1.3 dbms:hsqldb
/* Table 3: T_PERMISSION */
CREATE TABLE IF NOT EXISTS NEON_DATA.T_PERMISSION
(
    PERMISSION_ID        BIGINT GENERATED BY DEFAULT AS IDENTITY ( MINVALUE 1 START WITH 1),
    PERMISSION_CODE      VARCHAR(64)                           NOT NULL,
    PERMISSION_DESC      LONGVARCHAR                           NOT NULL,
    PARENT_PERMISSION_ID BIGINT,
    CREATED_AT           DATETIME    DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CREATED_BY           VARCHAR(16) DEFAULT 'SYSTEM'          NOT NULL,
    MODIFIED_AT          DATETIME    DEFAULT CURRENT_TIMESTAMP NOT NULL,
    MODIFIED_BY          VARCHAR(16) DEFAULT 'SYSTEM'          NOT NULL,

    /* P.Key */
    CONSTRAINT PK_T_PERMISSION PRIMARY KEY (PERMISSION_ID),

    /* UQ.Keys */
    CONSTRAINT UQ_T_PERMISSION_PERMISSION_CODE UNIQUE (PERMISSION_CODE),

    /* F.Keys */
    CONSTRAINT FK_T_PERMISSION_PARENT_PERMISSION_ID FOREIGN KEY (PARENT_PERMISSION_ID)
        REFERENCES T_PERMISSION (PERMISSION_ID) ON DELETE CASCADE,

    /* Checks */
    CONSTRAINT T_PERMISSION_ENSURE_UPPERCASE CHECK (PERMISSION_CODE = UPPER(PERMISSION_CODE))
);

-- ############################################################################################## --
--changeset SYSTEM:base-1.4 dbms:hsqldb
/* Table 3: T_ROLE_PERMISSION */
CREATE TABLE IF NOT EXISTS NEON_DATA.T_ROLE_PERMISSION
(
    ROLE_PERMISSION_ID        BIGINT GENERATED BY DEFAULT AS IDENTITY ( MINVALUE 1 START WITH 1),
    ROLE_ID                   BIGINT                                NOT NULL,
    PERMISSION_ID             BIGINT                                NOT NULL,
    PARENT_ROLE_PERMISSION_ID BIGINT,
    CREATED_AT                DATETIME    DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CREATED_BY                VARCHAR(16) DEFAULT 'SYSTEM'          NOT NULL,
    MODIFIED_AT               DATETIME    DEFAULT CURRENT_TIMESTAMP NOT NULL,
    MODIFIED_BY               VARCHAR(16) DEFAULT 'SYSTEM'          NOT NULL,

    /* P.Key */
    CONSTRAINT PK_T_ROLE_PERMISSION PRIMARY KEY (ROLE_PERMISSION_ID),

    /* UQ.Keys */
    CONSTRAINT UQ_T_ROLE_PERMISSION_ROLE_ID_PERMISSION_ID UNIQUE (ROLE_ID, PERMISSION_ID),

    /* F.Keys */
    CONSTRAINT FK_T_ROLE_PERMISSION_ROLE_ID FOREIGN KEY (ROLE_ID)
        REFERENCES T_ROLE (ROLE_ID) ON DELETE CASCADE,

    CONSTRAINT FK_T_ROLE_PERMISSION_PERMISSION_ID FOREIGN KEY (PERMISSION_ID)
        REFERENCES T_PERMISSION (PERMISSION_ID) ON DELETE CASCADE,

    CONSTRAINT FK_T_ROLE_PERMISSION_PARENT_ROLE_PERMISSION_ID FOREIGN KEY (PARENT_ROLE_PERMISSION_ID)
        REFERENCES T_ROLE_PERMISSION (ROLE_PERMISSION_ID) ON DELETE CASCADE
);