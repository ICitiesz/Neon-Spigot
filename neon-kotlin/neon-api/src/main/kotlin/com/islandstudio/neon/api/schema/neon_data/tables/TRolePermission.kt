/*
 * This file is generated by jOOQ.
 */
package com.islandstudio.neon.api.schema.neon_data.tables


import com.islandstudio.neon.api.schema.neon_data.NeonData
import com.islandstudio.neon.api.schema.neon_data.keys.*
import com.islandstudio.neon.api.schema.neon_data.tables.TPermission.TPermissionPath
import com.islandstudio.neon.api.schema.neon_data.tables.TRole.TRolePath
import com.islandstudio.neon.api.schema.neon_data.tables.records.TRolePermissionRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import java.time.LocalDateTime


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TRolePermission(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, TRolePermissionRecord>?,
    parentPath: InverseForeignKey<out Record, TRolePermissionRecord>?,
    aliased: Table<TRolePermissionRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<TRolePermissionRecord>(
    alias,
    NeonData.NEON_DATA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>NEON_DATA.T_ROLE_PERMISSION</code>
         */
        val T_ROLE_PERMISSION: TRolePermission = TRolePermission()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TRolePermissionRecord> = TRolePermissionRecord::class.java

    /**
     * The column <code>NEON_DATA.T_ROLE_PERMISSION.ROLE_PERMISSION_ID</code>.
     */
    val ROLE_PERMISSION_ID: TableField<TRolePermissionRecord, Long?> = createField(DSL.name("ROLE_PERMISSION_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>NEON_DATA.T_ROLE_PERMISSION.ROLE_ID</code>.
     */
    val ROLE_ID: TableField<TRolePermissionRecord, Long?> = createField(DSL.name("ROLE_ID"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>NEON_DATA.T_ROLE_PERMISSION.PERMISSION_ID</code>.
     */
    val PERMISSION_ID: TableField<TRolePermissionRecord, Long?> = createField(DSL.name("PERMISSION_ID"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column
     * <code>NEON_DATA.T_ROLE_PERMISSION.PARENT_ROLE_PERMISSION_ID</code>.
     */
    val PARENT_ROLE_PERMISSION_ID: TableField<TRolePermissionRecord, Long?> = createField(DSL.name("PARENT_ROLE_PERMISSION_ID"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>NEON_DATA.T_ROLE_PERMISSION.CREATED_AT</code>.
     */
    val CREATED_AT: TableField<TRolePermissionRecord, LocalDateTime?> = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>NEON_DATA.T_ROLE_PERMISSION.CREATED_BY</code>.
     */
    val CREATED_BY: TableField<TRolePermissionRecord, String?> = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.field(DSL.raw("'SYSTEM'"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>NEON_DATA.T_ROLE_PERMISSION.MODIFIED_AT</code>.
     */
    val MODIFIED_AT: TableField<TRolePermissionRecord, LocalDateTime?> = createField(DSL.name("MODIFIED_AT"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>NEON_DATA.T_ROLE_PERMISSION.MODIFIED_BY</code>.
     */
    val MODIFIED_BY: TableField<TRolePermissionRecord, String?> = createField(DSL.name("MODIFIED_BY"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.field(DSL.raw("'SYSTEM'"), SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<TRolePermissionRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<TRolePermissionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<TRolePermissionRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>NEON_DATA.T_ROLE_PERMISSION</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>NEON_DATA.T_ROLE_PERMISSION</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>NEON_DATA.T_ROLE_PERMISSION</code> table reference
     */
    constructor(): this(DSL.name("T_ROLE_PERMISSION"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TRolePermissionRecord>?, parentPath: InverseForeignKey<out Record, TRolePermissionRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, T_ROLE_PERMISSION, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TRolePermissionPath : TRolePermission, Path<TRolePermissionRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, TRolePermissionRecord>?, parentPath: InverseForeignKey<out Record, TRolePermissionRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<TRolePermissionRecord>): super(alias, aliased)
        override fun `as`(alias: String): TRolePermissionPath = TRolePermissionPath(DSL.name(alias), this)
        override fun `as`(alias: Name): TRolePermissionPath = TRolePermissionPath(alias, this)
        override fun `as`(alias: Table<*>): TRolePermissionPath = TRolePermissionPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else NeonData.NEON_DATA
    override fun getIdentity(): Identity<TRolePermissionRecord, Long?> = super.getIdentity() as Identity<TRolePermissionRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<TRolePermissionRecord> = PK_T_ROLE_PERMISSION
    override fun getUniqueKeys(): List<UniqueKey<TRolePermissionRecord>> = listOf(UQ_T_ROLE_PERMISSION_ROLE_ID_PERMISSION_ID)
    override fun getReferences(): List<ForeignKey<TRolePermissionRecord, *>> = listOf(FK_T_ROLE_PERMISSION_PARENT_ROLE_PERMISSION_ID, FK_T_ROLE_PERMISSION_PERMISSION_ID, FK_T_ROLE_PERMISSION_ROLE_ID)

    private lateinit var _tRolePermission: TRolePermissionPath

    /**
     * Get the implicit join path to the
     * <code>NEON_DATA.T_ROLE_PERMISSION</code> table.
     */
    fun tRolePermission(): TRolePermissionPath {
        if (!this::_tRolePermission.isInitialized)
            _tRolePermission = TRolePermissionPath(this, FK_T_ROLE_PERMISSION_PARENT_ROLE_PERMISSION_ID, null)

        return _tRolePermission;
    }

    val tRolePermission: TRolePermissionPath
        get(): TRolePermissionPath = tRolePermission()

    private lateinit var _tPermission: TPermissionPath

    /**
     * Get the implicit join path to the <code>NEON_DATA.T_PERMISSION</code>
     * table.
     */
    fun tPermission(): TPermissionPath {
        if (!this::_tPermission.isInitialized)
            _tPermission = TPermissionPath(this, FK_T_ROLE_PERMISSION_PERMISSION_ID, null)

        return _tPermission;
    }

    val tPermission: TPermissionPath
        get(): TPermissionPath = tPermission()

    private lateinit var _tRole: TRolePath

    /**
     * Get the implicit join path to the <code>NEON_DATA.T_ROLE</code> table.
     */
    fun tRole(): TRolePath {
        if (!this::_tRole.isInitialized)
            _tRole = TRolePath(this, FK_T_ROLE_PERMISSION_ROLE_ID, null)

        return _tRole;
    }

    val tRole: TRolePath
        get(): TRolePath = tRole()
    override fun `as`(alias: String): TRolePermission = TRolePermission(DSL.name(alias), this)
    override fun `as`(alias: Name): TRolePermission = TRolePermission(alias, this)
    override fun `as`(alias: Table<*>): TRolePermission = TRolePermission(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TRolePermission = TRolePermission(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TRolePermission = TRolePermission(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TRolePermission = TRolePermission(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): TRolePermission = TRolePermission(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): TRolePermission = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): TRolePermission = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): TRolePermission = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): TRolePermission = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): TRolePermission = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): TRolePermission = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): TRolePermission = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): TRolePermission = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): TRolePermission = where(DSL.notExists(select))
}
