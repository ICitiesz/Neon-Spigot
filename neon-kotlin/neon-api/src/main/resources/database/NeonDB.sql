/* Table 1: T_ROLE */
CREATE TABLE NEON_DATA.T_ROLE
(
    ROLE_ID   BIGINT IDENTITY,
    ROLE_DISPLAY_NAME VARCHAR(64) NOT NULL,
    ROLE_CODE VARCHAR(64) NOT NULL, /* E.g.: ROLE_CODE => role_admin */
    ASSIGNED_PLAYER_COUNT BIGINT NOT NULL DEFAULT 0,
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY VARCHAR(16) NOT NULL DEFAULT 'SYSTEM',
    MODIFIED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_BY VARCHAR(16) NOT NULL DEFAULT 'SYSTEM'
);

/* P.Keys */
ALTER TABLE NEON_DATA.T_ROLE
    ADD CONSTRAINT PK_T_ROLE PRIMARY KEY (ROLE_ID);

/* UQ.Keys */
ALTER TABLE NEON_DATA.T_ROLE
    ADD CONSTRAINT UQ_T_ROLE_ROLE_CODE UNIQUE (ROLE_CODE);

/* Checks */
ALTER TABLE NEON_DATA.T_ROLE
    ADD CONSTRAINT T_ROLE_ENSURE_UPPER CHECK(ROLE_CODE = UPPER(ROLE_CODE));

-- ##############################################################################################

/* Table 2: T_PLAYER_PROFILE */
CREATE TABLE NEON_DATA.T_PLAYER_PROFILE
(
    PLAYER_UUID UUID        NOT NULL,
    PLAYER_NAME VARCHAR(16) NOT NULL,
    JOIN_AT     DATETIME    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ROLE_ID     BIGINT,
    CREATED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CREATED_BY VARCHAR(16) NOT NULL DEFAULT 'SYSTEM',
    MODIFIED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_BY VARCHAR(16) NOT NULL DEFAULT 'SYSTEM'
);

/* P.Keys */
ALTER TABLE NEON_DATA.T_PLAYER_PROFILE
    ADD CONSTRAINT PK_T_PLAYER_PROFILE PRIMARY KEY (PLAYER_UUID);

/* UQ.Keys */
ALTER TABLE NEON_DATA.T_PLAYER_PROFILE
    ADD CONSTRAINT UQ_T_PLAYER_PROFILE_PLAYER_NAME UNIQUE (PLAYER_NAME);

/* F.Keys -> T_ROLE.ROLE_ID */
ALTER TABLE NEON_DATA.T_PLAYER_PROFILE
    ADD CONSTRAINT FK_T_PLAYER_PROFILE_T_ROLE_ROLE_ID FOREIGN KEY (ROLE_ID)
        REFERENCES T_ROLE (ROLE_ID)
        ON DELETE SET NULL;

-- ##############################################################################################

/* Table 3: T_ACCES_PERMISSION */
CREATE TABLE NEON_DATA.T_ACCESS_PERMISSION
(
    PERMISSION_ID   BIGINT IDENTITY,
    PERMISSION_NAME VARCHAR(64) NOT NULL,
    PERMISSION_CODE VARCHAR(64) NOT NULL, /* E.g.: permissionCode => access_n_serverFeature */
    PERMISSION_DESC LONGVARCHAR
);

/* P.Keys */
ALTER TABLE NEON_DATA.T_ACCESS_PERMISSION
    ADD CONSTRAINT PK_T_ACCESS_PERMISSION PRIMARY KEY (PERMISSION_ID);

/* UQ.Keys */
ALTER TABLE NEON_DATA.T_ACCESS_PERMISSION
    ADD CONSTRAINT UQ_T_ACCESS_PERMISSION_PERMISSION_NAME UNIQUE (PERMISSION_NAME);

ALTER TABLE NEON_DATA.T_ACCESS_PERMISSION
    ADD CONSTRAINT UQ_T_ACCESS_PERMISSION_PERMISSION_CODE UNIQUE (PERMISSION_CODE);

/* Checks */
ALTER TABLE NEON_DATA.T_ACCESS_PERMISSION
    ADD CONSTRAINT T_ACCESS_PERMISSION_ENSURE_LOWERCASE CHECK(PERMISSION_CODE = UPPER(PERMISSION_CODE));

-- ##############################################################################################

/* Table 4: T_ROLE_ACCESS */
CREATE TABLE NEON_DATA.T_ROLE_ACCESS
(
    ROLE_ACCESS_ID  BIGINT IDENTITY,
    ROLE_ID         BIGINT      NOT NULL,
    PERMISSION_ID   BIGINT      NOT NULL,
    ACCESS_TYPE     VARCHAR(7)  NOT NULL
);

/* P.Keys */
ALTER TABLE NEON_DATA.T_ROLE_ACCESS
    ADD CONSTRAINT PK_ROLE_ACCESS PRIMARY KEY (ROLE_ACCESS_ID);

/* F.Keys -> T_ROLE.ROLE_ID, T_ACCESS_PERMISSION.PERMISSION_ID */
ALTER TABLE NEON_DATA.T_ROLE_ACCESS
    ADD CONSTRAINT FK_T_ROLE_ACCESS__T_ROLE_ROLE_ID FOREIGN KEY (ROLE_ID)
        REFERENCES NEON_DATA.T_ROLE (ROLE_ID)
        ON DELETE CASCADE;

ALTER TABLE NEON_DATA.T_ROLE_ACCESS
    ADD CONSTRAINT FK_T_ROLE_ACCESS_PERMISSION__T_ACCESS_PERMISSION_PERMISSION_ID FOREIGN KEY (PERMISSION_ID)
        REFERENCES NEON_DATA.T_ACCESS_PERMISSION (PERMISSION_ID)
        ON DELETE CASCADE;

/* UQ.Keys */
ALTER TABLE NEON_DATA.T_ROLE_ACCESS
    ADD CONSTRAINT UQ_T_ROLE_ACCESS_BATCH_1 UNIQUE (ROLE_ID, PERMISSION_ID);

/* Checks */
ALTER TABLE NEON_DATA.T_ROLE_ACCESS
    ADD CONSTRAINT ENSURE_UPPER_CASE CHECK (ACCESS_TYPE = UPPER(ACCESS_TYPE));