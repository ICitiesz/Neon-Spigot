/*
 * This file is generated by jOOQ.
 */
package com.islandstudio.neon.stable.core.database.schema.neon_data.tables


import com.islandstudio.neon.stable.core.database.schema.neon_data.NeonData
import com.islandstudio.neon.stable.core.database.schema.neon_data.keys.FK_DT_PLAYER_PROFILE_DT_ROLE_ROLE_ID
import com.islandstudio.neon.stable.core.database.schema.neon_data.keys.FK_DT_ROLE_ACCESS__DT_ROLE_ROLE_ID
import com.islandstudio.neon.stable.core.database.schema.neon_data.keys.PK_DT_ROLE
import com.islandstudio.neon.stable.core.database.schema.neon_data.keys.UQ_DT_ROLE_ROLE_CODE
import com.islandstudio.neon.stable.core.database.schema.neon_data.tables.DtAccessPermission.DtAccessPermissionPath
import com.islandstudio.neon.stable.core.database.schema.neon_data.tables.DtPlayerProfile.DtPlayerProfilePath
import com.islandstudio.neon.stable.core.database.schema.neon_data.tables.DtRoleAccess.DtRoleAccessPath
import com.islandstudio.neon.stable.core.database.schema.neon_data.tables.records.DtRoleRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DtRole(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, DtRoleRecord>?,
    parentPath: InverseForeignKey<out Record, DtRoleRecord>?,
    aliased: Table<DtRoleRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<DtRoleRecord>(
    alias,
    NeonData.NEON_DATA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>NEON_DATA.DT_ROLE</code>
         */
        val DT_ROLE: DtRole = DtRole()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DtRoleRecord> = DtRoleRecord::class.java

    /**
     * The column <code>NEON_DATA.DT_ROLE.ROLE_ID</code>.
     */
    val ROLE_ID: TableField<DtRoleRecord, Long?> = createField(DSL.name("ROLE_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>NEON_DATA.DT_ROLE.ROLE_DISPLAY_NAME</code>.
     */
    val ROLE_DISPLAY_NAME: TableField<DtRoleRecord, String?> = createField(DSL.name("ROLE_DISPLAY_NAME"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>NEON_DATA.DT_ROLE.ROLE_CODE</code>.
     */
    val ROLE_CODE: TableField<DtRoleRecord, String?> = createField(DSL.name("ROLE_CODE"), SQLDataType.VARCHAR(64).nullable(false), this, "")

    /**
     * The column <code>NEON_DATA.DT_ROLE.ASSIGNED_PLAYER_COUNT</code>.
     */
    val ASSIGNED_PLAYER_COUNT: TableField<DtRoleRecord, Long?> = createField(DSL.name("ASSIGNED_PLAYER_COUNT"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>NEON_DATA.DT_ROLE.testCol</code>.
     */
    val TESTCOL: TableField<DtRoleRecord, String?> = createField(DSL.name("testCol"), SQLDataType.VARCHAR(20), this, "")

    private constructor(alias: Name, aliased: Table<DtRoleRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<DtRoleRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<DtRoleRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>NEON_DATA.DT_ROLE</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>NEON_DATA.DT_ROLE</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>NEON_DATA.DT_ROLE</code> table reference
     */
    constructor(): this(DSL.name("DT_ROLE"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DtRoleRecord>?, parentPath: InverseForeignKey<out Record, DtRoleRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, DT_ROLE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class DtRolePath : DtRole, Path<DtRoleRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DtRoleRecord>?, parentPath: InverseForeignKey<out Record, DtRoleRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<DtRoleRecord>): super(alias, aliased)
        override fun `as`(alias: String): DtRolePath = DtRolePath(DSL.name(alias), this)
        override fun `as`(alias: Name): DtRolePath = DtRolePath(alias, this)
        override fun `as`(alias: Table<*>): DtRolePath = DtRolePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else NeonData.NEON_DATA
    override fun getIdentity(): Identity<DtRoleRecord, Long?> = super.getIdentity() as Identity<DtRoleRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<DtRoleRecord> = PK_DT_ROLE
    override fun getUniqueKeys(): List<UniqueKey<DtRoleRecord>> = listOf(UQ_DT_ROLE_ROLE_CODE)

    private lateinit var _dtPlayerProfile: DtPlayerProfilePath

    /**
     * Get the implicit to-many join path to the
     * <code>NEON_DATA.DT_PLAYER_PROFILE</code> table
     */
    fun dtPlayerProfile(): DtPlayerProfilePath {
        if (!this::_dtPlayerProfile.isInitialized)
            _dtPlayerProfile = DtPlayerProfilePath(this, null, FK_DT_PLAYER_PROFILE_DT_ROLE_ROLE_ID.inverseKey)

        return _dtPlayerProfile;
    }

    val dtPlayerProfile: DtPlayerProfilePath
        get(): DtPlayerProfilePath = dtPlayerProfile()

    private lateinit var _dtRoleAccess: DtRoleAccessPath

    /**
     * Get the implicit to-many join path to the
     * <code>NEON_DATA.DT_ROLE_ACCESS</code> table
     */
    fun dtRoleAccess(): DtRoleAccessPath {
        if (!this::_dtRoleAccess.isInitialized)
            _dtRoleAccess = DtRoleAccessPath(this, null, FK_DT_ROLE_ACCESS__DT_ROLE_ROLE_ID.inverseKey)

        return _dtRoleAccess;
    }

    val dtRoleAccess: DtRoleAccessPath
        get(): DtRoleAccessPath = dtRoleAccess()

    /**
     * Get the implicit many-to-many join path to the
     * <code>NEON_DATA.DT_ACCESS_PERMISSION</code> table
     */
    val dtAccessPermission: DtAccessPermissionPath
        get(): DtAccessPermissionPath = dtRoleAccess().dtAccessPermission()
    override fun getChecks(): List<Check<DtRoleRecord>> = listOf(
        Internal.createCheck(this, DSL.name("DT_ROLE_ENSURE_UPPER"), "\"ROLE_CODE\" = UPPER(\"ROLE_CODE\")", true)
    )
    override fun `as`(alias: String): DtRole = DtRole(DSL.name(alias), this)
    override fun `as`(alias: Name): DtRole = DtRole(alias, this)
    override fun `as`(alias: Table<*>): DtRole = DtRole(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DtRole = DtRole(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DtRole = DtRole(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DtRole = DtRole(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): DtRole = DtRole(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): DtRole = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): DtRole = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): DtRole = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): DtRole = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): DtRole = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): DtRole = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): DtRole = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): DtRole = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): DtRole = where(DSL.notExists(select))
}
