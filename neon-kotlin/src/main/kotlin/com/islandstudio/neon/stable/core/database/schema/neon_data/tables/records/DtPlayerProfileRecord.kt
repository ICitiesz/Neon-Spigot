/*
 * This file is generated by jOOQ.
 */
package com.islandstudio.neon.stable.core.database.schema.neon_data.tables.records


import com.islandstudio.neon.stable.core.database.schema.neon_data.tables.DtPlayerProfile
import com.islandstudio.neon.stable.core.database.schema.neon_data.tables.pojos.PlayerProfile
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import java.time.LocalDateTime
import java.util.*


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DtPlayerProfileRecord() : UpdatableRecordImpl<DtPlayerProfileRecord>(DtPlayerProfile.DT_PLAYER_PROFILE) {

    open var playerUuid: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var playerName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var joinAt: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    open var roleId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised DtPlayerProfileRecord
     */
    constructor(playerUuid: UUID? = null, playerName: String? = null, joinAt: LocalDateTime? = null, roleId: Long? = null): this() {
        this.playerUuid = playerUuid
        this.playerName = playerName
        this.joinAt = joinAt
        this.roleId = roleId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised DtPlayerProfileRecord
     */
    constructor(value: PlayerProfile?): this() {
        if (value != null) {
            this.playerUuid = value.playerUuid
            this.playerName = value.playerName
            this.joinAt = value.joinAt
            this.roleId = value.roleId
            resetChangedOnNotNull()
        }
    }
}
